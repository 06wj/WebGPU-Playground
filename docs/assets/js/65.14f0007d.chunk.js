(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{483:function(n,e,t){"use strict";t.r(e),e.default="const canvas = document.querySelector('#canvas');\ncanvas.width = canvas.height = 50;\ncanvas.style = 'width:500px;height:500px';\nconst adapter = await navigator.gpu.requestAdapter();\nconst device = await adapter.requestDevice();\nconst glslang = await glslangModule();\n\nconst vs = `#version 450\n    void main(){\n        gl_Position = vec4(-0.5, 0.5, 0.0, 1);\n    }\n`;\n\nconst fs = `#version 450\n    precision highp float;\n    layout(location=0) out vec4 fragColor;\n    void main(){\n        fragColor = vec4(1.0, 1.0, 1.0, 1.0);\n    }\n`;\n\nconst context = canvas.getContext('gpupresent');\n\nconst swapChainFormat = 'bgra8unorm';\n\nconst swapChain = context.configure({\n    device,\n    format: swapChainFormat,\n});\n\nconst pipeline = device.createRenderPipeline({\n    vertex: {\n        module: device.createShaderModule({\n            code: glslang.compileGLSL(vs, 'vertex')\n        }),\n        entryPoint: 'main'\n    },\n    fragment: {\n        module: device.createShaderModule({\n            code: glslang.compileGLSL(fs, 'fragment')\n        }),\n        entryPoint: 'main',\n        targets: [{\n            format: swapChainFormat\n        }]\n    },\n    primitive: {\n        topology:'point-list'\n    }\n});\n\nfunction render() {\n    const commandEncoder = device.createCommandEncoder({});\n    const textureView = context.getCurrentTexture().createView();\n\n    const renderPassDescriptor = {\n        colorAttachments: [{\n            view: textureView,\n            loadValue: {\n                r: 0,\n                g: 0,\n                b: 0,\n                a: 1\n            },\n        }],\n    };\n\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.draw(1, 1, 0, 0);\n    passEncoder.endPass();\n\n    device.queue.submit([commandEncoder.finish()]);\n}\n\nconst ticker = new Hilo3d.Ticker(60);\nticker.start();\nticker.interval(() => {\n    render();\n}, 500);"}}]);