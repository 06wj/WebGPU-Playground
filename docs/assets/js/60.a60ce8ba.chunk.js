(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{476:function(n,e,t){"use strict";t.r(e),e.default='const canvas = document.querySelector(\'#canvas\');\ncanvas.width = innerWidth;\ncanvas.height = innerHeight;\nconst adapter = await navigator.gpu.requestAdapter();\nconst device = await adapter.requestDevice();\nconst glslang = await glslangModule();\n\nconst stage = new Hilo3d.Node();\nconst camera = new Hilo3d.PerspectiveCamera({\n    aspect: innerWidth / innerHeight,\n    far: 100,\n    near: 0.1,\n    z: 3\n});\n\nconst boxGeometry = new Hilo3d.BoxGeometry();\nboxGeometry.setAllRectUV([[0, 1], [1, 1], [1, 0], [0, 0]]);\nconst colorBox = new Hilo3d.Mesh({\n    geometry: boxGeometry,\n    material: new Hilo3d.BasicMaterial({\n        diffuse: new Hilo3d.Color(0.8, 0, 0)\n    }),\n    onUpdate: function() {\n        this.rotationX += .5;\n        this.rotationY += .5;\n    }\n});\n\nstage.addChild(camera);\nstage.addChild(colorBox);\n\nconst vs = `#version 450\n    layout(set=0, binding=0) uniform VertexUniforms{\n        mat4 u_modelViewProjectionMatrix;\n    };\n    \n    layout(location=0) in vec3 a_position;\n\n    void main(){\n        vec4 pos = vec4(a_position, 1.0);\n        gl_Position = u_modelViewProjectionMatrix * pos;\n    }\n`;\n\nconst fs = `#version 450\n    precision highp float;\n    layout(location=0) out vec4 fragColor;\n\n    void main(){\n        fragColor = vec4(0.3, 0.9, 0.6, 1);\n    }\n`;\n\nconst context = canvas.getContext(\'gpupresent\');\n\nconst swapChainFormat = "bgra8unorm";\n\nconst swapChain = context.configureSwapChain({\n    device,\n    format: swapChainFormat,\n});\n\nconst verticesData = boxGeometry.vertices.data;\nconst verticesBuffer = device.createBuffer({\n    size: verticesData.byteLength,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n    mappedAtCreation: true\n});\nnew Float32Array(verticesBuffer.getMappedRange()).set(verticesData);\nverticesBuffer.unmap();\n\nconst indicesData = boxGeometry.indices.data;\nconst indicesBuffer = device.createBuffer({\n    size: indicesData.byteLength,\n    usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST,\n    mappedAtCreation: true\n});\nnew Uint16Array(indicesBuffer.getMappedRange()).set(indicesData);\nindicesBuffer.unmap();\n\nconst uniformComponentCount = 16;\nconst uniformBufferSize = uniformComponentCount * 4;\nconst uniformBuffer = device.createBuffer({\n    size: uniformBufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST\n});\n\nconst bindGroupLayout = device.createBindGroupLayout({\n    entries: [{\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        type: "uniform-buffer"\n    }]\n});\n\nconst uniformBindGroup = device.createBindGroup({\n    layout: bindGroupLayout,\n    entries: [{\n        binding: 0,\n        resource: {\n            buffer: uniformBuffer\n        }\n    }],\n});\n\nconst pipelineLayout = device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] });\n\nconst pipeline = device.createRenderPipeline({\n    layout: pipelineLayout,\n    vertexStage: {\n        module: device.createShaderModule({\n            code: glslang.compileGLSL(vs, "vertex")\n        }),\n        entryPoint: "main"\n    },\n    fragmentStage: {\n        module: device.createShaderModule({\n            code: glslang.compileGLSL(fs, "fragment")\n        }),\n        entryPoint: "main"\n    },\n    primitiveTopology: "triangle-list",\n    rasterizationState: {\n        cullMode: \'back\',\n    },\n    colorStates: [{\n        format: swapChainFormat\n    }],\n    vertexState: {\n        vertexBuffers:[{\n            arrayStride: 3 * 4,\n            attributes:[{\n                shaderLocation: 0,\n                offset: 0,\n                format: "float3"\n            }]\n        }]\n    }\n});\n\nconst renderPassDescriptor = {\n    colorAttachments: [{\n        attachment: null,\n        loadValue: {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 1\n        },\n    }],\n};  \n\nconst vertexUniformData = new Float32Array(uniformComponentCount);\nfunction getModelMatrix(){\n    vertexUniformData.set(Hilo3d.semantic.MODELVIEWPROJECTION.get(colorBox), 0);\n    return vertexUniformData;\n}\n\nfunction render() {\n    renderPassDescriptor.colorAttachments[0].attachment = swapChain.getCurrentTexture().createView();\n    device.defaultQueue.writeBuffer(uniformBuffer, 0, getModelMatrix());\n\n    const commandEncoder = device.createCommandEncoder({});\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.setIndexBuffer(indicesBuffer, \'uint16\');\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n    passEncoder.drawIndexed(boxGeometry.indices.count, 1, 0, 0, 0);\n    passEncoder.endPass();\n\n    device.defaultQueue.submit([commandEncoder.finish()]);\n}\n\nconst ticker = new Hilo3d.Ticker(60);\nticker.start();\nticker.addTick({\n    tick(dt){\n        Hilo3d.semantic.init({}, {}, camera);\n        stage.traverseUpdate(dt);\n        stage.updateMatrixWorld();\n        camera.updateViewProjectionMatrix();\n\n        render();\n    }\n});'}}]);