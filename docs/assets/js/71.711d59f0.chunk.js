(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{491:function(n,e,t){"use strict";t.r(e),e.default="const canvas = document.querySelector('#canvas');\ncanvas.width = canvas.height = 500;\ncanvas.style = 'width:500px;height:500px';\nconst adapter = await navigator.gpu.requestAdapter();\nconst device = await adapter.requestDevice();\n\n\nconst vs = `\n    [[block]] struct Uniforms {\n      modelMatrix : mat3x3<f32>;\n    };\n    [[binding(0), group(0)]] var<uniform> uniforms : Uniforms;\n\n    struct VertexOutput {\n      [[builtin(position)]] position : vec4<f32>;\n    };\n\n    [[stage(vertex)]]\n    fn main([[location(0)]] a_position : vec2<f32>) -> VertexOutput {\n      var output : VertexOutput;\n      output.position = vec4<f32>(uniforms.modelMatrix * vec3<f32>(a_position, 0.0), 1.0);\n      return output;\n    }\n`;\n\nconst fs = `\n    [[stage(fragment)]]\n    fn main() -> [[location(0)]] vec4<f32> {\n      return vec4<f32>(0.9, 0.3, 0.6, 1.0);\n    }\n`;\n\nconst context = canvas.getContext('webgpu');\n\nconst swapChainFormat = 'bgra8unorm';\n\nconst swapChain = context.configure({\n    device,\n    format: swapChainFormat,\n});\n\nconst uniformBufferSize = 4 * 12;\nconst uniformBuffer = device.createBuffer({\n    size: uniformBufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n});\n\nconst uniformsBindGroupLayout = device.createBindGroupLayout({\n    entries: [{\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {}\n    }]\n});\n\nconst uniformBindGroup = device.createBindGroup({\n    layout: uniformsBindGroupLayout,\n    entries: [{\n        binding: 0,\n        resource: {\n            buffer: uniformBuffer,\n        },\n    }],\n});\n\nconst pipelineLayout = device.createPipelineLayout({ \n    bindGroupLayouts: [uniformsBindGroupLayout] \n});\n\nconst verticesData = new Float32Array([\n    0, 0,\n    -0.05, -0.65,\n    0.15, -0.8,\n]);\nconst verticesBuffer = device.createBuffer({\n    size: verticesData.byteLength,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST,\n    mappedAtCreation: true\n});\nnew Float32Array(verticesBuffer.getMappedRange()).set(verticesData);\nverticesBuffer.unmap();\n\nconst pipeline = device.createRenderPipeline({\n    layout: pipelineLayout,\n    vertex: {\n        module: device.createShaderModule({\n            code: vs\n        }),\n        entryPoint: 'main',\n        buffers: [{\n            arrayStride: 2 * 4,\n            attributes:[{\n                shaderLocation: 0,\n                offset: 0,\n                format: 'float32x2'\n            }]\n        }]\n    },\n    fragment: {\n        module: device.createShaderModule({\n            code: fs\n        }),\n        entryPoint: 'main',\n        targets: [{\n            format: swapChainFormat\n        }]\n    },\n    primitive:{\n\ttopology: 'triangle-list'\n},\n});\n\nconst modelMatrix = new Hilo3d.Matrix3();\nconst modelMatrixData = new Float32Array(12);\nfunction getModelMatrix(){\n    modelMatrix.rotate(-30/180*Math.PI);\n    const elements = modelMatrix.elements;\n    modelMatrixData.set(elements);\n    modelMatrixData.copyWithin(8, 6, 9);\n    modelMatrixData.copyWithin(4, 3, 6);\n    return modelMatrixData;\n}\n\nfunction render() {\n    const commandEncoder = device.createCommandEncoder({});\n    const textureView = context.getCurrentTexture().createView();\n    const renderPassDescriptor = {\n        colorAttachments: [{\n            view: textureView,\n            loadValue: {\n                r: 0.3,\n                g: 0.6,\n                b: 0.9,\n                a: 1\n            },\n        }],\n    };\n    device.queue.writeBuffer(uniformBuffer, 0, getModelMatrix());\n\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n    passEncoder.draw(3, 1, 0, 0);\n    passEncoder.endPass();\n\n    device.queue.submit([commandEncoder.finish()]);\n}\n\nconst ticker = new Hilo3d.Ticker(60);\nticker.start();\nticker.addTick({\n    tick(){\n        render();\n    }\n});"}}]);