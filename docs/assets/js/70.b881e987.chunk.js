(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{488:function(n,e,t){"use strict";t.r(e),e.default='const canvas = document.querySelector(\'#canvas\');\ncanvas.width = canvas.height = 500;\ncanvas.style = \'width:500px;height:500px\';\nconst adapter = await navigator.gpu.requestAdapter();\nconst device = await adapter.requestDevice();\nconst glslang = await glslangModule();\n\nconst vs = `#version 450\n    layout(location=0) in vec2 a_position;\n    layout(set=0,binding=0) uniform Uniforms{\n        mat3 modelMatrix;\n    } uniforms;\n    void main(){\n        vec3 pos =  uniforms.modelMatrix * vec3(a_position, 0.0);\n        gl_Position = vec4(pos, 1);\n    }\n`;\n\nconst fs = `#version 450\n    precision highp float;\n    layout(location=0) out vec4 fragColor;\n    void main(){\n        fragColor = vec4(0.9, 0.3, 0.6, 1);\n    }\n`;\n\nconst context = canvas.getContext(\'gpupresent\');\n\nconst swapChainFormat = "bgra8unorm";\n\nconst swapChain = context.configureSwapChain({\n    device,\n    format: swapChainFormat,\n});\n\nconst uniformBufferSize = 4 * 12;\nconst uniformBuffer = device.createBuffer({\n    size: uniformBufferSize,\n    usage: GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST,\n});\n\nconst uniformsBindGroupLayout = device.createBindGroupLayout({\n    entries: [{\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        type: "uniform-buffer"\n    }]\n});\n\nconst uniformBindGroup = device.createBindGroup({\n    layout: uniformsBindGroupLayout,\n    entries: [{\n        binding: 0,\n        resource: {\n            buffer: uniformBuffer,\n        },\n    }],\n});\n\nconst pipelineLayout = device.createPipelineLayout({ \n    bindGroupLayouts: [uniformsBindGroupLayout] \n});\n\nconst verticesData = new Float32Array([\n    0, 0,\n    -0.05, -0.65,\n    0.15, -0.8,\n]);\nconst verticesBuffer = device.createBuffer({\n    size: verticesData.byteLength,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST\n});\nhelpers.setSubData(verticesBuffer, 0, verticesData, device);\n\nconst pipeline = device.createRenderPipeline({\n    layout: pipelineLayout,\n    vertexStage: {\n        module: device.createShaderModule({\n            code: glslang.compileGLSL(vs, "vertex")\n        }),\n        entryPoint: "main"\n    },\n    fragmentStage: {\n        module: device.createShaderModule({\n            code: glslang.compileGLSL(fs, "fragment")\n        }),\n        entryPoint: "main"\n    },\n    primitiveTopology: "triangle-list",\n    colorStates: [{\n        format: swapChainFormat\n    }],\n    vertexState: {\n        vertexBuffers:[{\n            arrayStride: 2 * 4,\n            attributes:[{\n                shaderLocation: 0,\n                offset: 0,\n                format: "float2"\n            }]\n        }]\n    }\n});\n\nconst modelMatrix = new Hilo3d.Matrix3();\nconst modelMatrixData = new Float32Array(12);\nfunction getModelMatrix(){\n    modelMatrix.rotate(-30/180*Math.PI);\n    const elements = modelMatrix.elements;\n    modelMatrixData.set(elements);\n    modelMatrixData.copyWithin(8, 6, 9);\n    modelMatrixData.copyWithin(4, 3, 6);\n    return modelMatrixData;\n}\n\nfunction render() {\n    const commandEncoder = device.createCommandEncoder({});\n    const textureView = swapChain.getCurrentTexture().createView();\n    const renderPassDescriptor = {\n        colorAttachments: [{\n            attachment: textureView,\n            loadValue: {\n                r: 0.3,\n                g: 0.6,\n                b: 0.9,\n                a: 1\n            },\n        }],\n    };    \n    helpers.setSubData(uniformBuffer, 0, getModelMatrix(), device);\n\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n    passEncoder.setPipeline(pipeline);\n    passEncoder.setBindGroup(0, uniformBindGroup);\n    passEncoder.setVertexBuffer(0, verticesBuffer);\n    passEncoder.draw(3, 1, 0, 0);\n    passEncoder.endPass();\n\n    device.defaultQueue.submit([commandEncoder.finish()]);\n}\n\nconst ticker = new Hilo3d.Ticker(60);\nticker.start();\nticker.addTick({\n    tick(){\n        render();\n    }\n});'}}]);